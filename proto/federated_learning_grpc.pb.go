// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.24.4
// source: proto/federated_learning.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MLService_TrainLocalModel_FullMethodName  = "/federated_learning.MLService/TrainLocalModel"
	MLService_GetModelWeights_FullMethodName  = "/federated_learning.MLService/GetModelWeights"
	MLService_SetModelWeights_FullMethodName  = "/federated_learning.MLService/SetModelWeights"
	MLService_PerformInference_FullMethodName = "/federated_learning.MLService/PerformInference"
)

// MLServiceClient is the client API for MLService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MLService: Defines the API for the local Python ML component.
// The Go Orchestrator will be a client to this service.
type MLServiceClient interface {
	TrainLocalModel(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error)
	GetModelWeights(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelWeights, error)
	SetModelWeights(ctx context.Context, in *SetGlobalWeightsRequest, opts ...grpc.CallOption) (*AckResponse, error)
	PerformInference(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ClassificationResult, error)
}

type mLServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMLServiceClient(cc grpc.ClientConnInterface) MLServiceClient {
	return &mLServiceClient{cc}
}

func (c *mLServiceClient) TrainLocalModel(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*TrainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TrainResponse)
	err := c.cc.Invoke(ctx, MLService_TrainLocalModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) GetModelWeights(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ModelWeights, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelWeights)
	err := c.cc.Invoke(ctx, MLService_GetModelWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) SetModelWeights(ctx context.Context, in *SetGlobalWeightsRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, MLService_SetModelWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mLServiceClient) PerformInference(ctx context.Context, in *ImageData, opts ...grpc.CallOption) (*ClassificationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClassificationResult)
	err := c.cc.Invoke(ctx, MLService_PerformInference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MLServiceServer is the server API for MLService service.
// All implementations must embed UnimplementedMLServiceServer
// for forward compatibility.
//
// MLService: Defines the API for the local Python ML component.
// The Go Orchestrator will be a client to this service.
type MLServiceServer interface {
	TrainLocalModel(context.Context, *TrainRequest) (*TrainResponse, error)
	GetModelWeights(context.Context, *emptypb.Empty) (*ModelWeights, error)
	SetModelWeights(context.Context, *SetGlobalWeightsRequest) (*AckResponse, error)
	PerformInference(context.Context, *ImageData) (*ClassificationResult, error)
	mustEmbedUnimplementedMLServiceServer()
}

// UnimplementedMLServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMLServiceServer struct{}

func (UnimplementedMLServiceServer) TrainLocalModel(context.Context, *TrainRequest) (*TrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TrainLocalModel not implemented")
}
func (UnimplementedMLServiceServer) GetModelWeights(context.Context, *emptypb.Empty) (*ModelWeights, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelWeights not implemented")
}
func (UnimplementedMLServiceServer) SetModelWeights(context.Context, *SetGlobalWeightsRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetModelWeights not implemented")
}
func (UnimplementedMLServiceServer) PerformInference(context.Context, *ImageData) (*ClassificationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformInference not implemented")
}
func (UnimplementedMLServiceServer) mustEmbedUnimplementedMLServiceServer() {}
func (UnimplementedMLServiceServer) testEmbeddedByValue()                   {}

// UnsafeMLServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MLServiceServer will
// result in compilation errors.
type UnsafeMLServiceServer interface {
	mustEmbedUnimplementedMLServiceServer()
}

func RegisterMLServiceServer(s grpc.ServiceRegistrar, srv MLServiceServer) {
	// If the following call pancis, it indicates UnimplementedMLServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MLService_ServiceDesc, srv)
}

func _MLService_TrainLocalModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).TrainLocalModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_TrainLocalModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).TrainLocalModel(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_GetModelWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).GetModelWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_GetModelWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).GetModelWeights(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_SetModelWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGlobalWeightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).SetModelWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_SetModelWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).SetModelWeights(ctx, req.(*SetGlobalWeightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MLService_PerformInference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MLServiceServer).PerformInference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MLService_PerformInference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MLServiceServer).PerformInference(ctx, req.(*ImageData))
	}
	return interceptor(ctx, in, info, handler)
}

// MLService_ServiceDesc is the grpc.ServiceDesc for MLService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MLService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "federated_learning.MLService",
	HandlerType: (*MLServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TrainLocalModel",
			Handler:    _MLService_TrainLocalModel_Handler,
		},
		{
			MethodName: "GetModelWeights",
			Handler:    _MLService_GetModelWeights_Handler,
		},
		{
			MethodName: "SetModelWeights",
			Handler:    _MLService_SetModelWeights_Handler,
		},
		{
			MethodName: "PerformInference",
			Handler:    _MLService_PerformInference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/federated_learning.proto",
}

const (
	P2PService_StartTrainingRound_FullMethodName   = "/federated_learning.P2PService/StartTrainingRound"
	P2PService_SubmitLocalWeights_FullMethodName   = "/federated_learning.P2PService/SubmitLocalWeights"
	P2PService_BroadcastGlobalModel_FullMethodName = "/federated_learning.P2PService/BroadcastGlobalModel"
)

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// P2PService: Defines the API for inter-node communication between Go Orchestrators.
// Each Go Orchestrator will be both a client and a server for this service.
type P2PServiceClient interface {
	// Sent from the leader Go node to all client Go nodes to signal a new training round.
	StartTrainingRound(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*AckResponse, error)
	// Sent from a client Go node to the leader Go node to submit local weights.
	SubmitLocalWeights(ctx context.Context, in *ModelWeights, opts ...grpc.CallOption) (*AckResponse, error)
	// Sent from the leader Go node to all client Go nodes to broadcast the new global model.
	BroadcastGlobalModel(ctx context.Context, in *ModelWeights, opts ...grpc.CallOption) (*AckResponse, error)
}

type p2PServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PServiceClient(cc grpc.ClientConnInterface) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) StartTrainingRound(ctx context.Context, in *TrainRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, P2PService_StartTrainingRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) SubmitLocalWeights(ctx context.Context, in *ModelWeights, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, P2PService_SubmitLocalWeights_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) BroadcastGlobalModel(ctx context.Context, in *ModelWeights, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, P2PService_BroadcastGlobalModel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServiceServer is the server API for P2PService service.
// All implementations must embed UnimplementedP2PServiceServer
// for forward compatibility.
//
// P2PService: Defines the API for inter-node communication between Go Orchestrators.
// Each Go Orchestrator will be both a client and a server for this service.
type P2PServiceServer interface {
	// Sent from the leader Go node to all client Go nodes to signal a new training round.
	StartTrainingRound(context.Context, *TrainRequest) (*AckResponse, error)
	// Sent from a client Go node to the leader Go node to submit local weights.
	SubmitLocalWeights(context.Context, *ModelWeights) (*AckResponse, error)
	// Sent from the leader Go node to all client Go nodes to broadcast the new global model.
	BroadcastGlobalModel(context.Context, *ModelWeights) (*AckResponse, error)
	mustEmbedUnimplementedP2PServiceServer()
}

// UnimplementedP2PServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP2PServiceServer struct{}

func (UnimplementedP2PServiceServer) StartTrainingRound(context.Context, *TrainRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTrainingRound not implemented")
}
func (UnimplementedP2PServiceServer) SubmitLocalWeights(context.Context, *ModelWeights) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitLocalWeights not implemented")
}
func (UnimplementedP2PServiceServer) BroadcastGlobalModel(context.Context, *ModelWeights) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastGlobalModel not implemented")
}
func (UnimplementedP2PServiceServer) mustEmbedUnimplementedP2PServiceServer() {}
func (UnimplementedP2PServiceServer) testEmbeddedByValue()                    {}

// UnsafeP2PServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServiceServer will
// result in compilation errors.
type UnsafeP2PServiceServer interface {
	mustEmbedUnimplementedP2PServiceServer()
}

func RegisterP2PServiceServer(s grpc.ServiceRegistrar, srv P2PServiceServer) {
	// If the following call pancis, it indicates UnimplementedP2PServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P2PService_ServiceDesc, srv)
}

func _P2PService_StartTrainingRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).StartTrainingRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_StartTrainingRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).StartTrainingRound(ctx, req.(*TrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_SubmitLocalWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelWeights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).SubmitLocalWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_SubmitLocalWeights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).SubmitLocalWeights(ctx, req.(*ModelWeights))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_BroadcastGlobalModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelWeights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).BroadcastGlobalModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_BroadcastGlobalModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).BroadcastGlobalModel(ctx, req.(*ModelWeights))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PService_ServiceDesc is the grpc.ServiceDesc for P2PService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "federated_learning.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTrainingRound",
			Handler:    _P2PService_StartTrainingRound_Handler,
		},
		{
			MethodName: "SubmitLocalWeights",
			Handler:    _P2PService_SubmitLocalWeights_Handler,
		},
		{
			MethodName: "BroadcastGlobalModel",
			Handler:    _P2PService_BroadcastGlobalModel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/federated_learning.proto",
}
