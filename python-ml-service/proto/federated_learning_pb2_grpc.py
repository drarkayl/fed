# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto import federated_learning_pb2 as proto_dot_federated__learning__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/federated_learning_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MLServiceStub(object):
    """--- Services ---

    MLService: Defines the API for the local Python ML component.
    The Go Orchestrator will be a client to this service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TrainLocalModel = channel.unary_unary(
                '/federated_learning.MLService/TrainLocalModel',
                request_serializer=proto_dot_federated__learning__pb2.TrainRequest.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.TrainResponse.FromString,
                _registered_method=True)
        self.GetModelWeights = channel.unary_unary(
                '/federated_learning.MLService/GetModelWeights',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.ModelWeights.FromString,
                _registered_method=True)
        self.SetModelWeights = channel.unary_unary(
                '/federated_learning.MLService/SetModelWeights',
                request_serializer=proto_dot_federated__learning__pb2.SetGlobalWeightsRequest.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.AckResponse.FromString,
                _registered_method=True)
        self.PerformInference = channel.unary_unary(
                '/federated_learning.MLService/PerformInference',
                request_serializer=proto_dot_federated__learning__pb2.ImageData.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.ClassificationResult.FromString,
                _registered_method=True)


class MLServiceServicer(object):
    """--- Services ---

    MLService: Defines the API for the local Python ML component.
    The Go Orchestrator will be a client to this service.
    """

    def TrainLocalModel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelWeights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetModelWeights(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PerformInference(self, request, context):
        """Take image bytes, return classification label
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TrainLocalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.TrainLocalModel,
                    request_deserializer=proto_dot_federated__learning__pb2.TrainRequest.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.TrainResponse.SerializeToString,
            ),
            'GetModelWeights': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelWeights,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.ModelWeights.SerializeToString,
            ),
            'SetModelWeights': grpc.unary_unary_rpc_method_handler(
                    servicer.SetModelWeights,
                    request_deserializer=proto_dot_federated__learning__pb2.SetGlobalWeightsRequest.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.AckResponse.SerializeToString,
            ),
            'PerformInference': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformInference,
                    request_deserializer=proto_dot_federated__learning__pb2.ImageData.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.ClassificationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'federated_learning.MLService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('federated_learning.MLService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MLService(object):
    """--- Services ---

    MLService: Defines the API for the local Python ML component.
    The Go Orchestrator will be a client to this service.
    """

    @staticmethod
    def TrainLocalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.MLService/TrainLocalModel',
            proto_dot_federated__learning__pb2.TrainRequest.SerializeToString,
            proto_dot_federated__learning__pb2.TrainResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetModelWeights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.MLService/GetModelWeights',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_federated__learning__pb2.ModelWeights.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetModelWeights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.MLService/SetModelWeights',
            proto_dot_federated__learning__pb2.SetGlobalWeightsRequest.SerializeToString,
            proto_dot_federated__learning__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PerformInference(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.MLService/PerformInference',
            proto_dot_federated__learning__pb2.ImageData.SerializeToString,
            proto_dot_federated__learning__pb2.ClassificationResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class P2PServiceStub(object):
    """P2PService: Defines the API for inter-node communication between Go Orchestrators.
    Each Go Orchestrator will be both a client and a server for this service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartTrainingRound = channel.unary_unary(
                '/federated_learning.P2PService/StartTrainingRound',
                request_serializer=proto_dot_federated__learning__pb2.TrainRequest.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.AckResponse.FromString,
                _registered_method=True)
        self.SubmitLocalWeights = channel.unary_unary(
                '/federated_learning.P2PService/SubmitLocalWeights',
                request_serializer=proto_dot_federated__learning__pb2.ModelWeights.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.AckResponse.FromString,
                _registered_method=True)
        self.BroadcastGlobalModel = channel.unary_unary(
                '/federated_learning.P2PService/BroadcastGlobalModel',
                request_serializer=proto_dot_federated__learning__pb2.ModelWeights.SerializeToString,
                response_deserializer=proto_dot_federated__learning__pb2.AckResponse.FromString,
                _registered_method=True)


class P2PServiceServicer(object):
    """P2PService: Defines the API for inter-node communication between Go Orchestrators.
    Each Go Orchestrator will be both a client and a server for this service.
    """

    def StartTrainingRound(self, request, context):
        """Sent from the leader Go node to all client Go nodes to signal a new training round.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitLocalWeights(self, request, context):
        """Sent from a client Go node to the leader Go node to submit local weights.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BroadcastGlobalModel(self, request, context):
        """Sent from the leader Go node to all client Go nodes to broadcast the new global model.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_P2PServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartTrainingRound': grpc.unary_unary_rpc_method_handler(
                    servicer.StartTrainingRound,
                    request_deserializer=proto_dot_federated__learning__pb2.TrainRequest.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.AckResponse.SerializeToString,
            ),
            'SubmitLocalWeights': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitLocalWeights,
                    request_deserializer=proto_dot_federated__learning__pb2.ModelWeights.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.AckResponse.SerializeToString,
            ),
            'BroadcastGlobalModel': grpc.unary_unary_rpc_method_handler(
                    servicer.BroadcastGlobalModel,
                    request_deserializer=proto_dot_federated__learning__pb2.ModelWeights.FromString,
                    response_serializer=proto_dot_federated__learning__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'federated_learning.P2PService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('federated_learning.P2PService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class P2PService(object):
    """P2PService: Defines the API for inter-node communication between Go Orchestrators.
    Each Go Orchestrator will be both a client and a server for this service.
    """

    @staticmethod
    def StartTrainingRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.P2PService/StartTrainingRound',
            proto_dot_federated__learning__pb2.TrainRequest.SerializeToString,
            proto_dot_federated__learning__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubmitLocalWeights(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.P2PService/SubmitLocalWeights',
            proto_dot_federated__learning__pb2.ModelWeights.SerializeToString,
            proto_dot_federated__learning__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BroadcastGlobalModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/federated_learning.P2PService/BroadcastGlobalModel',
            proto_dot_federated__learning__pb2.ModelWeights.SerializeToString,
            proto_dot_federated__learning__pb2.AckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
