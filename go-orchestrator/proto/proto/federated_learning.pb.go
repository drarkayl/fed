// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.24.4
// source: proto/federated_learning.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ModelWeights represents the serialized weights of the neural network.
// We'll use bytes to send the raw numpy array data.
// It includes metadata for tracking.
type ModelWeights struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SerializedWeights []byte                 `protobuf:"bytes,1,opt,name=serialized_weights,json=serializedWeights,proto3" json:"serialized_weights,omitempty"` // Raw bytes of the NumPy array(s)
	ClientId          string                 `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                            // Unique ID of the client node (e.g., "node-1", "laptop-gemma")
	RoundId           int64                  `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`                              // The current Federated Learning round ID
	Timestamp         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                          // When these weights were generated/sent
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ModelWeights) Reset() {
	*x = ModelWeights{}
	mi := &file_proto_federated_learning_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelWeights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelWeights) ProtoMessage() {}

func (x *ModelWeights) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelWeights.ProtoReflect.Descriptor instead.
func (*ModelWeights) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{0}
}

func (x *ModelWeights) GetSerializedWeights() []byte {
	if x != nil {
		return x.SerializedWeights
	}
	return nil
}

func (x *ModelWeights) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ModelWeights) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

func (x *ModelWeights) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// TrainRequest: Sent from Go orchestrator to local Python ML service
// to initiate local training.
type TrainRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Epochs        int32                  `protobuf:"varint,1,opt,name=epochs,proto3" json:"epochs,omitempty"`                        // Number of local epochs to train
	BatchSize     int32                  `protobuf:"varint,2,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"` // Batch size for local training
	RoundId       int64                  `protobuf:"varint,3,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`       // The current Federated Learning round ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrainRequest) Reset() {
	*x = TrainRequest{}
	mi := &file_proto_federated_learning_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainRequest) ProtoMessage() {}

func (x *TrainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainRequest.ProtoReflect.Descriptor instead.
func (*TrainRequest) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{1}
}

func (x *TrainRequest) GetEpochs() int32 {
	if x != nil {
		return x.Epochs
	}
	return 0
}

func (x *TrainRequest) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *TrainRequest) GetRoundId() int64 {
	if x != nil {
		return x.RoundId
	}
	return 0
}

// TrainResponse: Sent from local Python ML service to Go orchestrator
// after local training. Contains the updated local weights and performance metrics.
type TrainResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Weights       *ModelWeights          `protobuf:"bytes,1,opt,name=weights,proto3" json:"weights,omitempty"`           // The newly trained local model weights
	Loss          float32                `protobuf:"fixed32,2,opt,name=loss,proto3" json:"loss,omitempty"`               // Local training loss
	Accuracy      float32                `protobuf:"fixed32,3,opt,name=accuracy,proto3" json:"accuracy,omitempty"`       // Local training accuracy
	Confirmation  *AckResponse           `protobuf:"bytes,4,opt,name=confirmation,proto3" json:"confirmation,omitempty"` // check Whether the training failed or not
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TrainResponse) Reset() {
	*x = TrainResponse{}
	mi := &file_proto_federated_learning_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TrainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrainResponse) ProtoMessage() {}

func (x *TrainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrainResponse.ProtoReflect.Descriptor instead.
func (*TrainResponse) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{2}
}

func (x *TrainResponse) GetWeights() *ModelWeights {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *TrainResponse) GetLoss() float32 {
	if x != nil {
		return x.Loss
	}
	return 0
}

func (x *TrainResponse) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *TrainResponse) GetConfirmation() *AckResponse {
	if x != nil {
		return x.Confirmation
	}
	return nil
}

// SetGlobalWeightsRequest: Sent from Go orchestrator to local Python ML service
// to update its model with the new aggregated global weights.
type SetGlobalWeightsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GlobalWeights *ModelWeights          `protobuf:"bytes,1,opt,name=global_weights,json=globalWeights,proto3" json:"global_weights,omitempty"` // The aggregated global model weights
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetGlobalWeightsRequest) Reset() {
	*x = SetGlobalWeightsRequest{}
	mi := &file_proto_federated_learning_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetGlobalWeightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGlobalWeightsRequest) ProtoMessage() {}

func (x *SetGlobalWeightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGlobalWeightsRequest.ProtoReflect.Descriptor instead.
func (*SetGlobalWeightsRequest) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{3}
}

func (x *SetGlobalWeightsRequest) GetGlobalWeights() *ModelWeights {
	if x != nil {
		return x.GlobalWeights
	}
	return nil
}

// AckResponse: Generic acknowledgement for various RPCs.
type AckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"` // Optional: detailed message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_proto_federated_learning_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{4}
}

func (x *AckResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AckResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ImageData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // The raw image bytes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ImageData) Reset() {
	*x = ImageData{}
	mi := &file_proto_federated_learning_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ImageData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageData) ProtoMessage() {}

func (x *ImageData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageData.ProtoReflect.Descriptor instead.
func (*ImageData) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{5}
}

func (x *ImageData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ClassificationResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`             // The classification label (e.g., "Max sleeping", "Bella playing")
	Confidence    float32                `protobuf:"fixed32,2,opt,name=confidence,proto3" json:"confidence,omitempty"` // Optional: Add confidence score for the classification
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClassificationResult) Reset() {
	*x = ClassificationResult{}
	mi := &file_proto_federated_learning_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationResult) ProtoMessage() {}

func (x *ClassificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_federated_learning_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationResult.ProtoReflect.Descriptor instead.
func (*ClassificationResult) Descriptor() ([]byte, []int) {
	return file_proto_federated_learning_proto_rawDescGZIP(), []int{6}
}

func (x *ClassificationResult) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ClassificationResult) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

var File_proto_federated_learning_proto protoreflect.FileDescriptor

const file_proto_federated_learning_proto_rawDesc = "" +
	"\n" +
	"\x1eproto/federated_learning.proto\x12\x12federated_learning\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xaf\x01\n" +
	"\fModelWeights\x12-\n" +
	"\x12serialized_weights\x18\x01 \x01(\fR\x11serializedWeights\x12\x1b\n" +
	"\tclient_id\x18\x02 \x01(\tR\bclientId\x12\x19\n" +
	"\bround_id\x18\x03 \x01(\x03R\aroundId\x128\n" +
	"\ttimestamp\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\"`\n" +
	"\fTrainRequest\x12\x16\n" +
	"\x06epochs\x18\x01 \x01(\x05R\x06epochs\x12\x1d\n" +
	"\n" +
	"batch_size\x18\x02 \x01(\x05R\tbatchSize\x12\x19\n" +
	"\bround_id\x18\x03 \x01(\x03R\aroundId\"\xc0\x01\n" +
	"\rTrainResponse\x12:\n" +
	"\aweights\x18\x01 \x01(\v2 .federated_learning.ModelWeightsR\aweights\x12\x12\n" +
	"\x04loss\x18\x02 \x01(\x02R\x04loss\x12\x1a\n" +
	"\baccuracy\x18\x03 \x01(\x02R\baccuracy\x12C\n" +
	"\fconfirmation\x18\x04 \x01(\v2\x1f.federated_learning.AckResponseR\fconfirmation\"b\n" +
	"\x17SetGlobalWeightsRequest\x12G\n" +
	"\x0eglobal_weights\x18\x01 \x01(\v2 .federated_learning.ModelWeightsR\rglobalWeights\"A\n" +
	"\vAckResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"\x1f\n" +
	"\tImageData\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"L\n" +
	"\x14ClassificationResult\x12\x14\n" +
	"\x05label\x18\x01 \x01(\tR\x05label\x12\x1e\n" +
	"\n" +
	"confidence\x18\x02 \x01(\x02R\n" +
	"confidence2\xee\x02\n" +
	"\tMLService\x12V\n" +
	"\x0fTrainLocalModel\x12 .federated_learning.TrainRequest\x1a!.federated_learning.TrainResponse\x12K\n" +
	"\x0fGetModelWeights\x12\x16.google.protobuf.Empty\x1a .federated_learning.ModelWeights\x12_\n" +
	"\x0fSetModelWeights\x12+.federated_learning.SetGlobalWeightsRequest\x1a\x1f.federated_learning.AckResponse\x12[\n" +
	"\x10PerformInference\x12\x1d.federated_learning.ImageData\x1a(.federated_learning.ClassificationResult2\x99\x02\n" +
	"\n" +
	"P2PService\x12W\n" +
	"\x12StartTrainingRound\x12 .federated_learning.TrainRequest\x1a\x1f.federated_learning.AckResponse\x12W\n" +
	"\x12SubmitLocalWeights\x12 .federated_learning.ModelWeights\x1a\x1f.federated_learning.AckResponse\x12Y\n" +
	"\x14BroadcastGlobalModel\x12 .federated_learning.ModelWeights\x1a\x1f.federated_learning.AckResponseB%Z#github.com/drarkayl/fed/proto;protob\x06proto3"

var (
	file_proto_federated_learning_proto_rawDescOnce sync.Once
	file_proto_federated_learning_proto_rawDescData []byte
)

func file_proto_federated_learning_proto_rawDescGZIP() []byte {
	file_proto_federated_learning_proto_rawDescOnce.Do(func() {
		file_proto_federated_learning_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_federated_learning_proto_rawDesc), len(file_proto_federated_learning_proto_rawDesc)))
	})
	return file_proto_federated_learning_proto_rawDescData
}

var file_proto_federated_learning_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_federated_learning_proto_goTypes = []any{
	(*ModelWeights)(nil),            // 0: federated_learning.ModelWeights
	(*TrainRequest)(nil),            // 1: federated_learning.TrainRequest
	(*TrainResponse)(nil),           // 2: federated_learning.TrainResponse
	(*SetGlobalWeightsRequest)(nil), // 3: federated_learning.SetGlobalWeightsRequest
	(*AckResponse)(nil),             // 4: federated_learning.AckResponse
	(*ImageData)(nil),               // 5: federated_learning.ImageData
	(*ClassificationResult)(nil),    // 6: federated_learning.ClassificationResult
	(*timestamppb.Timestamp)(nil),   // 7: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),           // 8: google.protobuf.Empty
}
var file_proto_federated_learning_proto_depIdxs = []int32{
	7,  // 0: federated_learning.ModelWeights.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 1: federated_learning.TrainResponse.weights:type_name -> federated_learning.ModelWeights
	4,  // 2: federated_learning.TrainResponse.confirmation:type_name -> federated_learning.AckResponse
	0,  // 3: federated_learning.SetGlobalWeightsRequest.global_weights:type_name -> federated_learning.ModelWeights
	1,  // 4: federated_learning.MLService.TrainLocalModel:input_type -> federated_learning.TrainRequest
	8,  // 5: federated_learning.MLService.GetModelWeights:input_type -> google.protobuf.Empty
	3,  // 6: federated_learning.MLService.SetModelWeights:input_type -> federated_learning.SetGlobalWeightsRequest
	5,  // 7: federated_learning.MLService.PerformInference:input_type -> federated_learning.ImageData
	1,  // 8: federated_learning.P2PService.StartTrainingRound:input_type -> federated_learning.TrainRequest
	0,  // 9: federated_learning.P2PService.SubmitLocalWeights:input_type -> federated_learning.ModelWeights
	0,  // 10: federated_learning.P2PService.BroadcastGlobalModel:input_type -> federated_learning.ModelWeights
	2,  // 11: federated_learning.MLService.TrainLocalModel:output_type -> federated_learning.TrainResponse
	0,  // 12: federated_learning.MLService.GetModelWeights:output_type -> federated_learning.ModelWeights
	4,  // 13: federated_learning.MLService.SetModelWeights:output_type -> federated_learning.AckResponse
	6,  // 14: federated_learning.MLService.PerformInference:output_type -> federated_learning.ClassificationResult
	4,  // 15: federated_learning.P2PService.StartTrainingRound:output_type -> federated_learning.AckResponse
	4,  // 16: federated_learning.P2PService.SubmitLocalWeights:output_type -> federated_learning.AckResponse
	4,  // 17: federated_learning.P2PService.BroadcastGlobalModel:output_type -> federated_learning.AckResponse
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_federated_learning_proto_init() }
func file_proto_federated_learning_proto_init() {
	if File_proto_federated_learning_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_federated_learning_proto_rawDesc), len(file_proto_federated_learning_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_proto_federated_learning_proto_goTypes,
		DependencyIndexes: file_proto_federated_learning_proto_depIdxs,
		MessageInfos:      file_proto_federated_learning_proto_msgTypes,
	}.Build()
	File_proto_federated_learning_proto = out.File
	file_proto_federated_learning_proto_goTypes = nil
	file_proto_federated_learning_proto_depIdxs = nil
}
